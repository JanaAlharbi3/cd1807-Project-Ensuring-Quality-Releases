trigger:
  - main

# Self-hosted agent on your VM
pool:
  name: Default

variables:
  RESOURCE_GROUP: "eqr-rg-ci"
  APP_NAME_PREFIX: "jana-eqr-ci-"
  APP_ZIP: "build/app.zip"

stages:
  # ================= CI =================
  - stage: BuildAndTest
    displayName: "Build & Test"
    jobs:
      - job: ci
        displayName: "Lint & unit tests"
        variables:
          - group: eqr-secrets # provides CLIENT_ID/CLIENT_SECRET/TENANT_ID if your tests need Azure
        steps:
          - checkout: self

          - bash: |
              set -euxo pipefail
              export DEBIAN_FRONTEND=noninteractive

              # Make sure base tooling is present
              sudo apt-get update
              sudo apt-get install -y \
                ca-certificates curl unzip \
                python3 python3-pip python3-venv python3-distutils

              # On 3.6 the system pip can be ancient; bootstrap a good one for Py3.6
              if ! python3 -m pip --version >/dev/null 2>&1; then
                curl -sS https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py
                sudo -H python3 get-pip.py
              fi
              # Keep pip/setuptools/wheel in a 3.6-compatible range
              python3 -m pip install --upgrade "pip<22.0" "setuptools<60" wheel

              # Create a virtual environment (try venv first, fall back to virtualenv)
              if ! python3 -m venv .venv >/dev/null 2>&1; then
                python3 -m pip install "virtualenv==20.24.5"
                python3 -m virtualenv -p python3 .venv
              fi

              . .venv/bin/activate
              python -V
              python -m pip --version

              # Install deps (pin tools to Py3.6-compatible versions)
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
              pip install "flake8<6" "pytest<8"

              # Lint & test
              flake8 .
              pytest -q
            displayName: "Ensure Python + venv + lint & tests"

          - bash: |
              set -euxo pipefail
              mkdir -p build
              zip -r "$(APP_ZIP)" . \
                -x ".git/*" ".venv/*" "build/*" "__pycache__/*" "*.pyc"
              ls -lh "$(APP_ZIP)"
            displayName: "Package app (zip)"

          - publish: $(APP_ZIP)
            artifact: appzip
            displayName: "Publish artifact"

  # ================= CD =================
  - stage: Deploy
    displayName: "Deploy to App Service"
    dependsOn: BuildAndTest
    jobs:
      - deployment: deploy
        displayName: "Zip deploy"
        environment: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: appzip

                - bash: |
                    set -euxo pipefail
                    if ! command -v az >/dev/null 2>&1; then
                      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    fi

                    # If you need SP login for management ops, uncomment and use your variable group:
                    # az login --service-principal \
                    #   -u "$(CLIENT_ID)" -p "$(CLIENT_SECRET)" --tenant "$(TENANT_ID)" >/dev/null

                    APP_NAME=$(az webapp list -g "$(RESOURCE_GROUP)" \
                      --query "reverse(sort_by([?starts_with(name, '$(APP_NAME_PREFIX)')], &name))[:1].name" -o tsv)
                    if [ -z "$APP_NAME" ]; then
                      echo "No webapp matching '$(APP_NAME_PREFIX)' in RG '$(RESOURCE_GROUP)'." >&2
                      exit 1
                    fi
                    echo "Deploying to: $APP_NAME"

                    az webapp deployment source config-zip \
                      -g "$(RESOURCE_GROUP)" -n "$APP_NAME" \
                      --src "$(Pipeline.Workspace)/appzip/app.zip"

                    HOST=$(az webapp show -g "$(RESOURCE_GROUP)" -n "$APP_NAME" --query "defaultHostName" -o tsv)
                    echo "Smoke check https://$HOST/"
                    curl -I --max-time 15 "https://$HOST/" || true
                  displayName: "Deploy (zip) + smoke check"
