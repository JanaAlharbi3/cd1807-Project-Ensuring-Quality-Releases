trigger:
  - main

pool:
  name: Default # self-hosted agent

variables:
  RESOURCE_GROUP: "eqr-rg-ci"
  APP_NAME_PREFIX: "jana-eqr-ci-"
  APP_ZIP: "build/app.zip"

stages:
  # ------------------ CI ------------------
  - stage: BuildAndTest
    displayName: "Build & Test"
    jobs:
      - job: ci
        displayName: "Lint & unit tests"
        variables:
          - group: eqr-secrets
        steps:
          - checkout: self

          - bash: |
              set -euxo pipefail
              export DEBIAN_FRONTEND=noninteractive

              # Ensure python3 exists (3.6 on Ubuntu 18.04)
              if ! command -v python3 >/dev/null 2>&1; then
                sudo apt-get update
                sudo apt-get install -y python3
              fi
              python3 -V || true

              # Ensure pip (first try apt, then bootstrap for 3.6 if needed)
              if ! python3 -m pip --version >/dev/null 2>&1; then
                sudo apt-get update
                sudo apt-get install -y python3-pip || true
              fi
              if ! python3 -m pip --version >/dev/null 2>&1; then
                # Python 3.6 needs the 3.6 bootstrap URL
                curl -sS https://bootstrap.pypa.io/pip/3.6/get-pip.py -o get-pip.py
                sudo -H python3 get-pip.py
              fi
              python3 -m pip --version

              # Ensure venv
              if ! python3 -m venv -h >/dev/null 2>&1; then
                sudo apt-get update
                sudo apt-get install -y python3-venv
              fi

              # Fresh venv, install deps pinned to Py3.6-compatible versions
              python3 -m venv .venv
              . .venv/bin/activate
              python -m pip install --upgrade pip wheel setuptools
              if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
              pip install "flake8<6" "pytest<8"
              flake8 .
              pytest -q
            displayName: "Ensure Python3/pip/venv + lint & tests"

          - bash: |
              set -euxo pipefail
              mkdir -p build
              zip -r "$(APP_ZIP)" . \
                -x ".git/*" ".venv/*" "build/*" "__pycache__/*" "*.pyc"
              ls -lh "$(APP_ZIP)"
            displayName: "Package app (zip)"

          - publish: $(APP_ZIP)
            artifact: appzip
            displayName: "Publish artifact"

  # ------------------ CD ------------------
  - stage: Deploy
    displayName: "Deploy to App Service"
    dependsOn: BuildAndTest
    jobs:
      - deployment: deploy
        environment: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: appzip

                - bash: |
                    set -euxo pipefail
                    if ! command -v az >/dev/null 2>&1; then
                      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                    fi
                    az login --service-principal \
                      -u "$(CLIENT_ID)" -p "$(CLIENT_SECRET)" --tenant "$(TENANT_ID)" >/dev/null

                    APP_NAME=$(az webapp list -g "$(RESOURCE_GROUP)" \
                      --query "reverse(sort_by([?starts_with(name, '$(APP_NAME_PREFIX)')], &name))[:1].name" -o tsv)
                    if [ -z "$APP_NAME" ]; then
                      echo "No webapp matching '$(APP_NAME_PREFIX)' in RG '$(RESOURCE_GROUP)'." >&2
                      exit 1
                    fi
                    echo "Deploying to: $APP_NAME"
                    az webapp deployment source config-zip \
                      -g "$(RESOURCE_GROUP)" -n "$APP_NAME" \
                      --src "$(Pipeline.Workspace)/appzip/app.zip"

                    HOST=$(az webapp show -g "$(RESOURCE_GROUP)" -n "$APP_NAME" --query "defaultHostName" -o tsv)
                    echo "Smoke check https://$HOST/"
                    curl -I --max-time 15 "https://$HOST/" || true
                  displayName: "Deploy (zip) + smoke check"
